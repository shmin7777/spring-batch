server:
  port: 8080
#spring:
#  batch:
#    jdbc:
#      initialize-schema: always
#  # H2 Setting Info (H2 Console에 접속하기 위한 설정정보 입력)
#  h2:
#    console:
#      enabled: true  # H2 Console을 사용할지 여부 (H2 Console은 H2 Database를 UI로 제공해주는 기능)
#      path: /h2-console  # H2 Console의 Path
#  # Database Setting Info (Database를 H2로 사용하기 위해 H2연결 정보 입력)
#  datasource:
#    driver-class-name: org.h2.Driver  # Database를 H2로 사용하겠다.
#    url: jdbc:h2:~/test  # H2 접속 정보
#    username: sa  # H2 접속 시 입력할 username 정보 (원하는 것으로 입력)
#    password:  # H2 접속 시 입력할 password 정보 (원하는 것으로 입력)
##
spring:
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  batch:
#    job:
#      names: ${job.name:NONE}
#      enabled: false
    jdbc:
      initialize-schema: always
  quartz:
    jdbc:
      initialize-schema: always
    job-store-type: jdbc
    
  datasource:
    url: jdbc:mysql://localhost:3306/spring_batch?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: 1234
    hikari:
#      driver-class-name: com.mysql.cj.jdbc.Driver
      connection-timeout: 5000
      maximum-pool-size: 10
      minimum-idle: 1
      connection-test-query: SELECT 1 FROM DUAL

logging:
  level:
    root: INFO
#    kr.co.openlabs.example: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{GLOBALID}-%X{BRANCHID}] %logger{36} [%4L] - %m%n"
